db_nearby_amenty_hotel <- db_nearby_amenty[db_nearby_amenty$cid=="hotel",]
m <- addAwesomeMarkers(m, lng = db_nearby_amenty_hotel$lng, lat = db_nearby_amenty_hotel$lat, popup=db_nearby_amenty_hotel$name,icon = icon.fa.hotel, group = ("2. nearby hotel"))
# MDC
db_nearby_amenty_mdc <- db_nearby_amenty[db_nearby_amenty$cid=="mdc",]
m <- addAwesomeMarkers(m, lng = db_nearby_amenty_mdc$lng, lat = db_nearby_amenty_mdc$lat, popup=db_nearby_amenty_mdc$name,icon = icon.fa.mdc, group = ("3. nearby Mcdonalds"))
# Starbucks
db_nearby_amenty_stb <- db_nearby_amenty[db_nearby_amenty$cid=="stb",]
m <- addAwesomeMarkers(m, lng = db_nearby_amenty_stb$lng, lat = db_nearby_amenty_stb$lat, popup=db_nearby_amenty_stb$name,icon = icon.fa.stb, group = ("4. nearby Starbucks"))
# Competitor
df_competor <- read.csv("df_competor.csv",stringsAsFactors = FALSE)
m = addCircles(m, lng = df_competor$lng, lat = df_competor$lat, weight = 1,color = "purple", radius = sqrt(df_competor$seat) * 15, label = df_competor$brand, labelOptions = labelOptions(noHide = F, direction = 'bottom',offset=c(0,15)),group = "X4 - All Competitors(seat)")
m = addCircles(m, lng = df_competor$lng, lat = df_competor$lat, weight = 1,color = "orange", radius = 500, label = df_competor$brand, labelOptions = labelOptions(noHide = F, direction = 'bottom', offset=c(0,15)), group = "X3 - All Competitors(500m)")
# Mixpace
df_mixpace <- read.csv("df_mixpace.csv",stringsAsFactors = FALSE)
m = addCircles(m, lng = df_mixpace$lng, lat = df_mixpace$lat, weight = 1, color = "blue", radius = 500, label = df_mixpace$name,labelOptions = labelOptions(noHide = F, direction = 'bottom',offset=c(0,15)), group = "X1 - Mixpace(500m)")
m = addCircles(m, lng = df_mixpace$lng, lat = df_mixpace$lat, weight = 1, color = "blue", radius = sqrt(df_mixpace$seat) * 15, label = df_mixpace$name, labelOptions = labelOptions(noHide = F, direction = 'bottom', offset=c(0,15)),group = "X2 - Mixpace(seat)")
# Add center road
str(df_center_road)
for (i in c(2:22,23)) {
m = addPolylines(m, lat = c(df_center_road[i,"lat_wgs84_bgn"],df_center_road[i,"lat_wgs84_end"]), lng = c(df_center_road[i,"lng_wgs84_bgn"],df_center_road[i,"lng_wgs84_end"]), color = "red",group = "5. Center Road",label = df_center_road[i,"name"],labelOptions = labelOptions(noHide = F, direction = 'bottom', offset=c(0,15)))
}
m <- addPolylines(m, lat = c(df_center_road[24,"lat_wgs84_bgn"],df_center_road[25,"lat_wgs84_end"]), lng = c(df_center_road[24,"lng_wgs84_bgn"],df_center_road[25,"lng_wgs84_end"]), color = "red",group = "5. Center Road",label = df_center_road[i,"name"],labelOptions = labelOptions(noHide = F, direction = 'bottom', offset=c(0,15)))
m <- addAwesomeMarkers(m, lng = df_landmark$lng, lat = df_landmark$lat, label=df_landmark$landmark,labelOptions = labelOptions(noHide = F, direction = 'bottom', offset=c(0,15)),icon = icon.landmark, group = ("6. City Center"))
### Add button
m<- m %>% addTiles() %>%
addEasyButton(easyButton(
icon = "fa-globe", title = "Zoom to Level 5",
onClick = JS("function(btn, map){ map.setZoom(5);}"))) %>%
addEasyButton(easyButton(
icon = "fa-crosshairs", title = "Locate Shanghai",
onClick = JS("function(btn, map){ map.setView([31.23914,121.4823],12);}")))
### hide layer
m <- m %>% hideGroup(c("1. nearby station", "2. nearby hotel", "3. nearby Mcdonalds", "4. nearby Starbucks", "5. Center Road", "6. City Center", "X1 - Mixpace(500m)", "X2 - Mixpace(seat)", "X3 - All Competitors(500m)", "X4 - All Competitors(seat)"))
### Show the Map
m
m = leaflet()
# m = addTiles(m)
m = addProviderTiles(m, "OpenStreetMap.BlackAndWhite", group = "BlackAndWhite(default)")
m = addTiles(m, group = "OSM")
m = addProviderTiles(m,"Stamen.Toner", group = "Toner")
m = addProviderTiles(m, "Stamen.TonerLite", group = "Toner Lite")
# m = addProviderTiles(m, "Stamen.Watercolor", group = "Watercolor")
m = addProviderTiles(m, "Stamen.TonerHybrid", group = "TonerHybrid")
m = addProviderTiles(m, "Esri.WorldImagery", group = "WorldImagery")
# m = addProviderTiles(m, "OpenMapSurfer.Roads", group = "OpenMapSurfer.Roads")
m = addLayersControl(m,
baseGroups = c("BlackAndWhite(default)","OSM","Toner Lite","Toner", "TonerHybrid","WorldImagery"),
overlayGroups = c("1. nearby station", "2. nearby hotel", "3. nearby Mcdonalds", "4. nearby Starbucks", "5. Center Road", "6. City Center","X1 - Mixpace(500m)", "X2 - Mixpace(seat)", "X3 - All Competitors(500m)", "X4 - All Competitors(seat)")
# layersControlOptions(collapsed = FALSE, autoZIndex = FALSE)
)
# str(db_nearby_amenty$cid)
### Define Icon
icon.fa.target <- makeAwesomeIcon(icon = "star", markerColor = "orange", library = "fa", iconColor = "black")
icon.fa.train <- makeAwesomeIcon(icon = "subway", markerColor = "purple", library = "fa", iconColor = "black")
icon.fa.stb <- makeAwesomeIcon(icon = "coffee", markerColor = "green", library = "fa", iconColor = "black")
icon.fa.mdc <- makeAwesomeIcon(icon = "meetup", markerColor = "red", library = "fa", iconColor = "black")
icon.fa.hotel <- makeAwesomeIcon(icon = "hotel", markerColor = "blue", library = "fa", iconColor = "black")
icon.landmark <- makeAwesomeIcon(icon = "photo", markerColor = "red", library = "fa",
iconColor = "black")
icon.fa.train_10 <- makeAwesomeIcon(icon = "subway", markerColor = "purple", library = "fa",
iconColor = "black")
### Add to Maps
# Target
m <- addAwesomeMarkers(m, lng = target_address_geo$lng, lat = target_address_geo$lat, label=target_address_geo$address, labelOptions = labelOptions(noHide = F, direction = 'bottom', offset=c(0,15)),icon = icon.fa.target)
m = addCircles(m, lng = target_address_geo$lng, lat = target_address_geo$lat, weight = 2,fillOpacity=0.1, popup="500m" ,color = "blue", radius = 500)
m = addCircles(m, lng = target_address_geo$lng, lat = target_address_geo$lat, weight = 1,fillOpacity=0.05, popup="1000m" ,color = "purple", radius = 1000)
# Station
db_nearby_amenty_station <- db_nearby_amenty[db_nearby_amenty$cid=="station",]
m <- addAwesomeMarkers(m, lng = db_nearby_amenty_station$lng, lat = db_nearby_amenty_station$lat, popup=db_nearby_amenty_station$name,icon = icon.fa.train, group = ("1. nearby station"))
# Hotel
db_nearby_amenty_hotel <- db_nearby_amenty[db_nearby_amenty$cid=="hotel",]
m <- addAwesomeMarkers(m, lng = db_nearby_amenty_hotel$lng, lat = db_nearby_amenty_hotel$lat, popup=db_nearby_amenty_hotel$name,icon = icon.fa.hotel, group = ("2. nearby hotel"))
# MDC
db_nearby_amenty_mdc <- db_nearby_amenty[db_nearby_amenty$cid=="mdc",]
m <- addAwesomeMarkers(m, lng = db_nearby_amenty_mdc$lng, lat = db_nearby_amenty_mdc$lat, popup=db_nearby_amenty_mdc$name,icon = icon.fa.mdc, group = ("3. nearby Mcdonalds"))
# Starbucks
db_nearby_amenty_stb <- db_nearby_amenty[db_nearby_amenty$cid=="stb",]
m <- addAwesomeMarkers(m, lng = db_nearby_amenty_stb$lng, lat = db_nearby_amenty_stb$lat, popup=db_nearby_amenty_stb$name,icon = icon.fa.stb, group = ("4. nearby Starbucks"))
# Competitor
df_competor <- read.csv("df_competor.csv",stringsAsFactors = FALSE)
m = addCircles(m, lng = df_competor$lng, lat = df_competor$lat, weight = 1,color = "purple", radius = sqrt(df_competor$seat) * 15, label = df_competor$brand, labelOptions = labelOptions(noHide = F, direction = 'bottom',offset=c(0,15)),group = "X4 - All Competitors(seat)")
m = addCircles(m, lng = df_competor$lng, lat = df_competor$lat, weight = 1,color = "orange", radius = 500, label = df_competor$brand, labelOptions = labelOptions(noHide = F, direction = 'bottom', offset=c(0,15)), group = "X3 - All Competitors(500m)")
# Mixpace
df_mixpace <- read.csv("df_mixpace.csv",stringsAsFactors = FALSE)
m = addCircles(m, lng = df_mixpace$lng, lat = df_mixpace$lat, weight = 1, color = "blue", radius = 500, label = df_mixpace$name,labelOptions = labelOptions(noHide = F, direction = 'bottom',offset=c(0,15)), group = "X1 - Mixpace(500m)")
m = addCircles(m, lng = df_mixpace$lng, lat = df_mixpace$lat, weight = 1, color = "blue", radius = sqrt(df_mixpace$seat) * 15, label = df_mixpace$name, labelOptions = labelOptions(noHide = F, direction = 'bottom', offset=c(0,15)),group = "X2 - Mixpace(seat)")
# Add center road
str(df_center_road)
for (i in c(2:22,23)) {
m = addPolylines(m, lat = c(df_center_road[i,"lat_wgs84_bgn"],df_center_road[i,"lat_wgs84_end"]), lng = c(df_center_road[i,"lng_wgs84_bgn"],df_center_road[i,"lng_wgs84_end"]), color = "red",group = "5. Center Road",label = df_center_road[i,"name"],labelOptions = labelOptions(noHide = F, direction = 'bottom', offset=c(0,15)))
}
m <- addPolylines(m, lat = c(df_center_road[24,"lat_wgs84_bgn"],df_center_road[25,"lat_wgs84_end"]), lng = c(df_center_road[24,"lng_wgs84_bgn"],df_center_road[25,"lng_wgs84_end"]), color = "red",group = "5. Center Road",label = df_center_road[i,"name"],labelOptions = labelOptions(noHide = F, direction = 'bottom', offset=c(0,15)))
m <- addAwesomeMarkers(m, lng = df_landmark$lng, lat = df_landmark$lat, label=df_landmark$landmark,labelOptions = labelOptions(noHide = F, direction = 'bottom', offset=c(0,15)),icon = icon.landmark, group = ("6. City Center"))
### Add button
m<- m %>% addTiles() %>%
addEasyButton(easyButton(
icon = "fa-globe", title = "Zoom to Level 5",
onClick = JS("function(btn, map){ map.setZoom(5);}"))) %>%
addEasyButton(easyButton(
icon = "fa-crosshairs", title = "Locate Shanghai",
onClick = JS("function(btn, map){ map.setView([31.23914,121.4823],12);}")))
### hide layer
m <- m %>% hideGroup(c("1. nearby station", "2. nearby hotel", "3. nearby Mcdonalds", "4. nearby Starbucks", "5. Center Road", "6. City Center", "X1 - Mixpace(500m)", "X2 - Mixpace(seat)", "X3 - All Competitors(500m)", "X4 - All Competitors(seat)"))
### Show the Map
m
m = leaflet()
m = addTiles(m)
m = addProviderTiles(m, "OpenStreetMap.BlackAndWhite")
m = addProviderTiles(m, "OpenStreetMap.BlackAndWhite", group = "BlackAndWhite(default)")
m = addTiles(m, group = "OSM")
m = addProviderTiles(m,"Stamen.Toner", group = "Toner")
m = addProviderTiles(m, "Stamen.TonerLite", group = "Toner Lite")
# m = addProviderTiles(m, "Stamen.Watercolor", group = "Watercolor")
m = addProviderTiles(m, "Stamen.TonerHybrid", group = "TonerHybrid")
m = addProviderTiles(m, "Esri.WorldImagery", group = "WorldImagery")
# m = addProviderTiles(m, "OpenMapSurfer.Roads", group = "OpenMapSurfer.Roads")
m = addLayersControl(m,
baseGroups = c("BlackAndWhite(default)","OSM","Toner Lite","Toner", "TonerHybrid","WorldImagery"),
overlayGroups = c("1. nearby station", "2. nearby hotel", "3. nearby Mcdonalds", "4. nearby Starbucks", "5. Center Road", "6. City Center","X1 - Mixpace(500m)", "X2 - Mixpace(seat)", "X3 - All Competitors(500m)", "X4 - All Competitors(seat)")
# layersControlOptions(collapsed = FALSE, autoZIndex = FALSE)
)
# str(db_nearby_amenty$cid)
### Define Icon
icon.fa.target <- makeAwesomeIcon(icon = "star", markerColor = "orange", library = "fa", iconColor = "black")
icon.fa.train <- makeAwesomeIcon(icon = "subway", markerColor = "purple", library = "fa", iconColor = "black")
icon.fa.stb <- makeAwesomeIcon(icon = "coffee", markerColor = "green", library = "fa", iconColor = "black")
icon.fa.mdc <- makeAwesomeIcon(icon = "meetup", markerColor = "red", library = "fa", iconColor = "black")
icon.fa.hotel <- makeAwesomeIcon(icon = "hotel", markerColor = "blue", library = "fa", iconColor = "black")
icon.landmark <- makeAwesomeIcon(icon = "photo", markerColor = "red", library = "fa",
iconColor = "black")
icon.fa.train_10 <- makeAwesomeIcon(icon = "subway", markerColor = "purple", library = "fa",
iconColor = "black")
### Add to Maps
# Target
m <- addAwesomeMarkers(m, lng = target_address_geo$lng, lat = target_address_geo$lat, label=target_address_geo$address, labelOptions = labelOptions(noHide = F, direction = 'bottom', offset=c(0,15)),icon = icon.fa.target)
m = addCircles(m, lng = target_address_geo$lng, lat = target_address_geo$lat, weight = 2,fillOpacity=0.1, popup="500m" ,color = "blue", radius = 500)
m = addCircles(m, lng = target_address_geo$lng, lat = target_address_geo$lat, weight = 1,fillOpacity=0.05, popup="1000m" ,color = "purple", radius = 1000)
# Station
db_nearby_amenty_station <- db_nearby_amenty[db_nearby_amenty$cid=="station",]
m <- addAwesomeMarkers(m, lng = db_nearby_amenty_station$lng, lat = db_nearby_amenty_station$lat, popup=db_nearby_amenty_station$name,icon = icon.fa.train, group = ("1. nearby station"))
# Hotel
db_nearby_amenty_hotel <- db_nearby_amenty[db_nearby_amenty$cid=="hotel",]
m <- addAwesomeMarkers(m, lng = db_nearby_amenty_hotel$lng, lat = db_nearby_amenty_hotel$lat, popup=db_nearby_amenty_hotel$name,icon = icon.fa.hotel, group = ("2. nearby hotel"))
# MDC
db_nearby_amenty_mdc <- db_nearby_amenty[db_nearby_amenty$cid=="mdc",]
m <- addAwesomeMarkers(m, lng = db_nearby_amenty_mdc$lng, lat = db_nearby_amenty_mdc$lat, popup=db_nearby_amenty_mdc$name,icon = icon.fa.mdc, group = ("3. nearby Mcdonalds"))
# Starbucks
db_nearby_amenty_stb <- db_nearby_amenty[db_nearby_amenty$cid=="stb",]
m <- addAwesomeMarkers(m, lng = db_nearby_amenty_stb$lng, lat = db_nearby_amenty_stb$lat, popup=db_nearby_amenty_stb$name,icon = icon.fa.stb, group = ("4. nearby Starbucks"))
# Competitor
df_competor <- read.csv("df_competor.csv",stringsAsFactors = FALSE)
m = addCircles(m, lng = df_competor$lng, lat = df_competor$lat, weight = 1,color = "purple", radius = sqrt(df_competor$seat) * 15, label = df_competor$brand, labelOptions = labelOptions(noHide = F, direction = 'bottom',offset=c(0,15)),group = "X4 - All Competitors(seat)")
m = addCircles(m, lng = df_competor$lng, lat = df_competor$lat, weight = 1,color = "orange", radius = 500, label = df_competor$brand, labelOptions = labelOptions(noHide = F, direction = 'bottom', offset=c(0,15)), group = "X3 - All Competitors(500m)")
# Mixpace
df_mixpace <- read.csv("df_mixpace.csv",stringsAsFactors = FALSE)
m = addCircles(m, lng = df_mixpace$lng, lat = df_mixpace$lat, weight = 1, color = "blue", radius = 500, label = df_mixpace$name,labelOptions = labelOptions(noHide = F, direction = 'bottom',offset=c(0,15)), group = "X1 - Mixpace(500m)")
m = addCircles(m, lng = df_mixpace$lng, lat = df_mixpace$lat, weight = 1, color = "blue", radius = sqrt(df_mixpace$seat) * 15, label = df_mixpace$name, labelOptions = labelOptions(noHide = F, direction = 'bottom', offset=c(0,15)),group = "X2 - Mixpace(seat)")
# Add center road
str(df_center_road)
for (i in c(2:22,23)) {
m = addPolylines(m, lat = c(df_center_road[i,"lat_wgs84_bgn"],df_center_road[i,"lat_wgs84_end"]), lng = c(df_center_road[i,"lng_wgs84_bgn"],df_center_road[i,"lng_wgs84_end"]), color = "red",group = "5. Center Road",label = df_center_road[i,"name"],labelOptions = labelOptions(noHide = F, direction = 'bottom', offset=c(0,15)))
}
m <- addPolylines(m, lat = c(df_center_road[24,"lat_wgs84_bgn"],df_center_road[25,"lat_wgs84_end"]), lng = c(df_center_road[24,"lng_wgs84_bgn"],df_center_road[25,"lng_wgs84_end"]), color = "red",group = "5. Center Road",label = df_center_road[i,"name"],labelOptions = labelOptions(noHide = F, direction = 'bottom', offset=c(0,15)))
m <- addAwesomeMarkers(m, lng = df_landmark$lng, lat = df_landmark$lat, label=df_landmark$landmark,labelOptions = labelOptions(noHide = F, direction = 'bottom', offset=c(0,15)),icon = icon.landmark, group = ("6. City Center"))
### Add button
m<- m %>% addTiles() %>%
addEasyButton(easyButton(
icon = "fa-globe", title = "Zoom to Level 5",
onClick = JS("function(btn, map){ map.setZoom(5);}"))) %>%
addEasyButton(easyButton(
icon = "fa-crosshairs", title = "Locate Shanghai",
onClick = JS("function(btn, map){ map.setView([31.23914,121.4823],12);}")))
### hide layer
m <- m %>% hideGroup(c("1. nearby station", "2. nearby hotel", "3. nearby Mcdonalds", "4. nearby Starbucks", "5. Center Road", "6. City Center", "X1 - Mixpace(500m)", "X2 - Mixpace(seat)", "X3 - All Competitors(500m)", "X4 - All Competitors(seat)"))
### Show the Map
m
m = leaflet()
# m = addTiles(m)
m = addProviderTiles(m, "OpenStreetMap.BlackAndWhite")
m = addProviderTiles(m, "OpenStreetMap.BlackAndWhite", group = "BlackAndWhite(default)")
m = addTiles(m, group = "OSM")
m = addProviderTiles(m,"Stamen.Toner", group = "Toner")
m = addProviderTiles(m, "Stamen.TonerLite", group = "Toner Lite")
# m = addProviderTiles(m, "Stamen.Watercolor", group = "Watercolor")
m = addProviderTiles(m, "Stamen.TonerHybrid", group = "TonerHybrid")
m = addProviderTiles(m, "Esri.WorldImagery", group = "WorldImagery")
# m = addProviderTiles(m, "OpenMapSurfer.Roads", group = "OpenMapSurfer.Roads")
m = addLayersControl(m,
baseGroups = c("BlackAndWhite(default)","OSM","Toner Lite","Toner", "TonerHybrid","WorldImagery"),
overlayGroups = c("1. nearby station", "2. nearby hotel", "3. nearby Mcdonalds", "4. nearby Starbucks", "5. Center Road", "6. City Center","X1 - Mixpace(500m)", "X2 - Mixpace(seat)", "X3 - All Competitors(500m)", "X4 - All Competitors(seat)")
# layersControlOptions(collapsed = FALSE, autoZIndex = FALSE)
)
# str(db_nearby_amenty$cid)
### Define Icon
icon.fa.target <- makeAwesomeIcon(icon = "star", markerColor = "orange", library = "fa", iconColor = "black")
icon.fa.train <- makeAwesomeIcon(icon = "subway", markerColor = "purple", library = "fa", iconColor = "black")
icon.fa.stb <- makeAwesomeIcon(icon = "coffee", markerColor = "green", library = "fa", iconColor = "black")
icon.fa.mdc <- makeAwesomeIcon(icon = "meetup", markerColor = "red", library = "fa", iconColor = "black")
icon.fa.hotel <- makeAwesomeIcon(icon = "hotel", markerColor = "blue", library = "fa", iconColor = "black")
icon.landmark <- makeAwesomeIcon(icon = "photo", markerColor = "red", library = "fa",
iconColor = "black")
icon.fa.train_10 <- makeAwesomeIcon(icon = "subway", markerColor = "purple", library = "fa",
iconColor = "black")
### Add to Maps
# Target
m <- addAwesomeMarkers(m, lng = target_address_geo$lng, lat = target_address_geo$lat, label=target_address_geo$address, labelOptions = labelOptions(noHide = F, direction = 'bottom', offset=c(0,15)),icon = icon.fa.target)
m = addCircles(m, lng = target_address_geo$lng, lat = target_address_geo$lat, weight = 2,fillOpacity=0.1, popup="500m" ,color = "blue", radius = 500)
m = addCircles(m, lng = target_address_geo$lng, lat = target_address_geo$lat, weight = 1,fillOpacity=0.05, popup="1000m" ,color = "purple", radius = 1000)
# Station
db_nearby_amenty_station <- db_nearby_amenty[db_nearby_amenty$cid=="station",]
m <- addAwesomeMarkers(m, lng = db_nearby_amenty_station$lng, lat = db_nearby_amenty_station$lat, popup=db_nearby_amenty_station$name,icon = icon.fa.train, group = ("1. nearby station"))
# Hotel
db_nearby_amenty_hotel <- db_nearby_amenty[db_nearby_amenty$cid=="hotel",]
m <- addAwesomeMarkers(m, lng = db_nearby_amenty_hotel$lng, lat = db_nearby_amenty_hotel$lat, popup=db_nearby_amenty_hotel$name,icon = icon.fa.hotel, group = ("2. nearby hotel"))
# MDC
db_nearby_amenty_mdc <- db_nearby_amenty[db_nearby_amenty$cid=="mdc",]
m <- addAwesomeMarkers(m, lng = db_nearby_amenty_mdc$lng, lat = db_nearby_amenty_mdc$lat, popup=db_nearby_amenty_mdc$name,icon = icon.fa.mdc, group = ("3. nearby Mcdonalds"))
# Starbucks
db_nearby_amenty_stb <- db_nearby_amenty[db_nearby_amenty$cid=="stb",]
m <- addAwesomeMarkers(m, lng = db_nearby_amenty_stb$lng, lat = db_nearby_amenty_stb$lat, popup=db_nearby_amenty_stb$name,icon = icon.fa.stb, group = ("4. nearby Starbucks"))
# Competitor
df_competor <- read.csv("df_competor.csv",stringsAsFactors = FALSE)
m = addCircles(m, lng = df_competor$lng, lat = df_competor$lat, weight = 1,color = "purple", radius = sqrt(df_competor$seat) * 15, label = df_competor$brand, labelOptions = labelOptions(noHide = F, direction = 'bottom',offset=c(0,15)),group = "X4 - All Competitors(seat)")
m = addCircles(m, lng = df_competor$lng, lat = df_competor$lat, weight = 1,color = "orange", radius = 500, label = df_competor$brand, labelOptions = labelOptions(noHide = F, direction = 'bottom', offset=c(0,15)), group = "X3 - All Competitors(500m)")
# Mixpace
df_mixpace <- read.csv("df_mixpace.csv",stringsAsFactors = FALSE)
m = addCircles(m, lng = df_mixpace$lng, lat = df_mixpace$lat, weight = 1, color = "blue", radius = 500, label = df_mixpace$name,labelOptions = labelOptions(noHide = F, direction = 'bottom',offset=c(0,15)), group = "X1 - Mixpace(500m)")
m = addCircles(m, lng = df_mixpace$lng, lat = df_mixpace$lat, weight = 1, color = "blue", radius = sqrt(df_mixpace$seat) * 15, label = df_mixpace$name, labelOptions = labelOptions(noHide = F, direction = 'bottom', offset=c(0,15)),group = "X2 - Mixpace(seat)")
# Add center road
str(df_center_road)
for (i in c(2:22,23)) {
m = addPolylines(m, lat = c(df_center_road[i,"lat_wgs84_bgn"],df_center_road[i,"lat_wgs84_end"]), lng = c(df_center_road[i,"lng_wgs84_bgn"],df_center_road[i,"lng_wgs84_end"]), color = "red",group = "5. Center Road",label = df_center_road[i,"name"],labelOptions = labelOptions(noHide = F, direction = 'bottom', offset=c(0,15)))
}
m <- addPolylines(m, lat = c(df_center_road[24,"lat_wgs84_bgn"],df_center_road[25,"lat_wgs84_end"]), lng = c(df_center_road[24,"lng_wgs84_bgn"],df_center_road[25,"lng_wgs84_end"]), color = "red",group = "5. Center Road",label = df_center_road[i,"name"],labelOptions = labelOptions(noHide = F, direction = 'bottom', offset=c(0,15)))
m <- addAwesomeMarkers(m, lng = df_landmark$lng, lat = df_landmark$lat, label=df_landmark$landmark,labelOptions = labelOptions(noHide = F, direction = 'bottom', offset=c(0,15)),icon = icon.landmark, group = ("6. City Center"))
### Add button
m<- m %>% addTiles() %>%
addEasyButton(easyButton(
icon = "fa-globe", title = "Zoom to Level 5",
onClick = JS("function(btn, map){ map.setZoom(5);}"))) %>%
addEasyButton(easyButton(
icon = "fa-crosshairs", title = "Locate Shanghai",
onClick = JS("function(btn, map){ map.setView([31.23914,121.4823],12);}")))
### hide layer
m <- m %>% hideGroup(c("1. nearby station", "2. nearby hotel", "3. nearby Mcdonalds", "4. nearby Starbucks", "5. Center Road", "6. City Center", "X1 - Mixpace(500m)", "X2 - Mixpace(seat)", "X3 - All Competitors(500m)", "X4 - All Competitors(seat)"))
### Show the Map
m
View(result)
View(result_rec)
nearby_restaurant <- find_nearby_store(target_address,"餐厅",1000)
View(nearby_restaurant)
nearby_restaurant <- calculate_walking_dist(target_address,nearby_restaurant)
nearby_restaurant <- nearby_restaurant[nearby_restaurant$walking_distance<1000,]
write.csv(nearby_restaurant_1000m_walk,"nearby_restaurant.csv")
nearby_restaurant_1000m_walk <- nearby_restaurant[nearby_restaurant$walking_distance<1000,]
write.csv(nearby_restaurant_1000m_walk,"nearby_restaurant.csv")
tem <- nearby_restaurant_1000m_walk
if (nrow(tem)>0) {
result[13,"data"] <- nrow(tem)
result[14,"data"] <- mean(as.integer(as.character(nearby_restaurant_1000m_walk$price)))
}
View(result)
nearby_restaurant_1000m_walk
nearby_restaurant
result[14,"data"] <- mean(as.integer(as.character(nearby_restaurant$price)))
nearby_restaurant <- find_nearby_store(target_address,"餐厅",1000)
result[14,"data"] <- restaurant_avg
nearby_restaurant <- find_nearby_store(target_address,"餐厅",1000)
restaurant_avg <- mean(as.integer(as.character(nearby_restaurant$price)))
restaurant_avg
tem <- nearby_restaurant_1000m_walk
result[13,"data"] <- nrow(tem)
result[14,"data"] <- restaurant_avg
runApp()
str(nearby_restaurant)
nearby_restaurant <- nearby_restaurant[,c("name","lat","lng","address","walking_distance","walking_duration")]
if (nrow(nearby_restaurant)>0) {
nearby_restaurant$cid <- "restaurant"
}
nearby_restaurant <- nearby_restaurant_1000m_walk
str(nearby_restaurant)
nearby_restaurant <- nearby_restaurant[,c("name","lat","lng","address","walking_distance","walking_duration")]
if (nrow(nearby_restaurant)>0) {
nearby_restaurant$cid <- "restaurant"
}
db_nearby_amenty <- rbind(nearby_star_hotel, nearby_mdc_store, nearby_station, nearby_stb_store, nearby_restaurant)
str(db_nearby_amenty)
tem <- subset(db_nearby_amenty,cid=="restaurant")
tem
result
runApp()
db_nearby_amenty_restaurant
db_nearby_amenty_restaurant <- db_nearby_amenty[db_nearby_amenty$cid=="restaurant",]
db_nearby_amenty_restaurant
runApp()
icon.fa.restaurant <- makeAwesomeIcon(icon = "food", markerColor = "yellow", library = "fa",iconColor = "black")
# Add Restaurants
db_nearby_amenty_restaurant <- db_nearby_amenty[db_nearby_amenty$cid=="restaurant",]
m <- addAwesomeMarkers(m, lng = db_nearby_amenty_restaurant$lng, lat = db_nearby_amenty_restaurant$lat, popup=db_nearby_amenty_restaurant$name,icon = icon.fa.restaurant, group = ("7. nearby Restaurant"))
m
?makeAwesomeIcon
icon.fa.restaurant <- makeAwesomeIcon(icon = "restaurant", markerColor = "lightgreen", library = "fa",iconColor = "black")
db_nearby_amenty_restaurant <- db_nearby_amenty[db_nearby_amenty$cid=="restaurant",]
m <- addAwesomeMarkers(m, lng = db_nearby_amenty_restaurant$lng, lat = db_nearby_amenty_restaurant$lat, popup=db_nearby_amenty_restaurant$name,icon = icon.fa.restaurant, group = ("7. nearby Restaurant"))
m
?makeAwesomeIcon
icon.fa.restaurant <- makeAwesomeIcon(icon = "food", markerColor = "lightgreen", library = "fa",iconColor = "black")
# Add Restaurants
db_nearby_amenty_restaurant <- db_nearby_amenty[db_nearby_amenty$cid=="restaurant",]
m <- addAwesomeMarkers(m, lng = db_nearby_amenty_restaurant$lng, lat = db_nearby_amenty_restaurant$lat, popup=db_nearby_amenty_restaurant$name,icon = icon.fa.restaurant, group = ("7. nearby Restaurant"))
m
?makeAwesomeIcon
icon.fa.restaurant <- makeAwesomeIcon(text = "Food", markerColor = "lightgreen", library = "fa",iconColor = "black")
db_nearby_amenty_restaurant <- db_nearby_amenty[db_nearby_amenty$cid=="restaurant",]
m <- addAwesomeMarkers(m, lng = db_nearby_amenty_restaurant$lng, lat = db_nearby_amenty_restaurant$lat, popup=db_nearby_amenty_restaurant$name,icon = icon.fa.restaurant, group = ("7. nearby Restaurant"))
m
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library("rMaps")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp('~/app')
runApp('~/app')
runApp('~/Desktop/Mixpace/ShinyMap/V4')
library(shiny)
runApp('~/Desktop/Mixpace/ShinyMap/V4')
runApp('~/Desktop/Mixpace/ShinyMap/V4')
runApp('~/Desktop/Mixpace/ShinyMap/V4')
runApp('~/Desktop/Mixpace/ShinyMap/V4')
distm()
distm
distm()
if(!require("geosphere")){
install.packages("geosphere")
library("geosphere")
}
distm()
runApp('~/Desktop/Mixpace/ShinyMap/V4')
runApp('~/Desktop/Mixpace/ShinyMap/V4')
library(DT)
runApp('~/Desktop/Mixpace/ShinyMap/V4')
?reshape2
library("Quandl")
?Quandl
library("rMaps")
?rMaps
runApp()
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(stringr)
if(!require("plyr")){
install.packages("plyr")
library("plyr")
}
if(!require("ggplot2")){
install.packages("ggplot2")
library("ggplot2")
}
if(!require("fitdistrplus")){
install.packages("fitdistrplus")
library("fitdistrplus")
}
if(!require("GGally")){
install.packages("GGally")
library("GGally")
}
if(!require("lubridate")){
install.packages("lubridate")
library("lubridate")
}
if (!require("mediation")) {
install.packages("mediation")
library(mediation)
}
if (!require("scales")) {
install.packages("scales")
library(scales)
}
if (!require("grid")) {
install.packages("grid")
library(grid)
}
if (!require("RColorBrewer")) {
install.packages("RColorBrewer")
library(RColorBrewer)
}
# data_activity <- read.csv("~/Desktop/Mixpace/mi_activty_1_jun24.csv")
# head(data_activity)
# str(data_activity)
## from ftp
url <- 'http://172.16.4.242:8080/WebReport/ReportServer?reportlet=WorkBook4.cpt&op=write&format=csv'
data_activity <- read.csv(url, header=TRUE, stringsAsFactors=FALSE, fileEncoding="GB18030")
str(data_activity)
data_activity$region <- as.integer(data_activity$region)
data_activity$trade <- as.integer(data_activity$trade)
data_activity$wish <- as.integer(data_activity$wish)
data_activity$nums <- as.integer(data_activity$nums)
data_activity$aim <- as.integer(data_activity$aim)
data_activity$create_time <- as.POSIXct(as.character(data_activity$create_time), format = "%Y-%m-%d %H:%M:%S")
str(data_activity)
data <- data_activity[,c("id","name","tel","create_time","region","trade","wish","nums","aim","url")]
str(data)
colnames(data)[5:9]<- c("region_id","industry_id","exp_date_id","size_id","purpose_id")
str(data)
str(data)
data_source <- data[,c("id","name","tel","create_time","url","purpose_id")]
head(data_source,10)
nrow(data_source)
#
# url_success_ratio <- sum(data_source$url != "")/nrow(data_source)
# url_success_ratio
#
# valid_ratio <- data.frame(value=numeric(),
#                  type=character(),
#                  stringsAsFactors=FALSE)
# valid_ratio[1,1] <- sum(data_source$url != "")
# valid_ratio[1,2] <- "valid"
# valid_ratio[2,1] <- nrow(data_source) - sum(data_source$url != "")
# valid_ratio[2,2] <- "invalid"
## Remove data with empty source
data_valid_source <- data_source[data_source$url != "",]
data_valid_source <- data_valid_source[data_valid_source$url != "/",]
data_valid_source <- data_valid_source[data_valid_source$url != "NA",]
data_valid_source <- data_valid_source[data_valid_source$url != "na",]
nrow(data_valid_source)
str(data_valid_source)
head(data_valid_source$url,10)
## Remove data with duplicate url and phone number
data_valid_src_unique <- data_valid_source [!duplicated(data_valid_source[c("url","tel")]),]
nrow(data_valid_src_unique)
head(data_valid_src_unique,10)
## Remove data with unvalid phone number
data_valid_number <-  data_valid_src_unique
data_valid_number <- data_valid_number[-c(0:nrow(data_valid_number)),]
data_valid_number
nrow(data_valid_src_unique)
for (i in 1:nrow(data_valid_src_unique)) {
# i <- 29
# data_valid_src_unique$tel[i]
tem_num <- as.numeric(as.character(data_valid_src_unique$tel[i]))
tem_name <- as.character(data_valid_src_unique$name[i])
# class(tem)
# tem
if (!is.na(tem_num)) {
# Remove numbers less than eight numbers
if (trunc(tem_num/10000000)<10) {
next
}
else if(str_detect(tem_name, "test")){
next
}
else if(str_detect(tem_name, "测")){
next
}
else{
data_valid_number <- rbind(data_valid_number,data_valid_src_unique[i,])
}
}
# print(i)
}
str(data_valid_number)
#
# for (i in 1:nrow(data_valid_src_unique)) {
#         # i <- 29
#         # data_valid_src_unique$tel[i]
#         tem <- as.numeric(as.character(data_valid_src_unique$tel[i]))
#         # class(tem)
#         # tem
#         if (!is.na(tem)) {
#                 if (trunc(tem/10000000000)==1) {
#                         data_valid_number <- rbind(data_valid_number,data_valid_src_unique[i,])
#                 }
#         }
#         # print(i)
# }
data_valid <- data_valid_number
str(data_valid)
View(data_valid)
df <- data.frame(id=as.Date(character()),
create_time=character(),
url=character(),
url_1=character(),
V1=character(),
V2=character(),
V3=character(),
V4=character(),
V5=character(),
V6=character(),
stringsAsFactors=FALSE)
for (i in 1:nrow(data_valid)) {
file <- data_valid[i,]
# file
tem1 <- str_split_fixed(data_valid[i,"url"],"//", 2)[2]
tem1
tem2 <- str_split_fixed(tem1,"/", 6)
# str(merge(t,tem2))
tem3 <- merge(file,tem2)
df <- rbind(df,tem3)
}
head(df)
df
View(df)
